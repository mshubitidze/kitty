vim:fileencoding=utf-8:foldmethod=marker

#: fonts {{{

#: kitty has very powerful font management. you can configure
#: individual font faces and even specify special fonts for particular
#: characters.

font_family      hack nerd font mono
# bold_font        auto
# italic_font      auto
# bold_italic_font auto

#: you can specify different fonts for the bold/italic/bold-italic
#: variants. to get a full list of supported fonts use the `kitty
#: +list-fonts` command. by default they are derived automatically, by
#: the oses font system. when bold_font or bold_italic_font is set to
#: auto on macos, the priority of bold fonts is semi-bold, bold,
#: heavy. setting them manually is useful for font families that have
#: many weight variants like book, medium, thick, etc. for example::

#:     font_family      operator mono book
#:     bold_font        operator mono medium
#:     italic_font      operator mono book italic
#:     bold_italic_font operator mono medium italic

font_size 20.0

#: font size (in pts)

# force_ltr no

#: kitty does not support bidi (bidirectional text), however, for rtl
#: scripts, words are automatically displayed in rtl. that is to say,
#: in an rtl script, the words "hello world" display in kitty as
#: "world hello", and if you try to select a substring of an rtl-
#: shaped string, you will get the character that would be there had
#: the the string been ltr. for example, assuming the hebrew word
#: ירושלים, selecting the character that on the screen appears to be ם
#: actually writes into the selection buffer the character י.  kitty's
#: default behavior is useful in conjunction with a filter to reverse
#: the word order, however, if you wish to manipulate rtl glyphs, it
#: can be very challenging to work with, so this option is provided to
#: turn it off. furthermore, this option can be used with the command
#: line program gnu fribidi
#: <https://github.com/fribidi/fribidi#executable> to get bidi
#: support, because it will force kitty to always treat the text as
#: ltr, which fribidi expects for terminals.

# symbol_map

#: e.g. symbol_map u+e0a0-u+e0a3,u+e0c0-u+e0c7 powerlinesymbols

#: map the specified unicode codepoints to a particular font. useful
#: if you need special rendering for some symbols, such as for
#: powerline. avoids the need for patched fonts. each unicode code
#: point is specified in the form `u+<code point in hexadecimal>`. you
#: can specify multiple code points, separated by commas and ranges
#: separated by hyphens. this option can be specified multiple times.
#: the syntax is::

#:     symbol_map codepoints font family name

# narrow_symbols

#: e.g. narrow_symbols u+e0a0-u+e0a3,u+e0c0-u+e0c7 1

#: usually, for private use unicode characters and some symbol/dingbat
#: characters, if the character is followed by one or more spaces,
#: kitty will use those extra cells to render the character larger, if
#: the character in the font has a wide aspect ratio. using this
#: option you can force kitty to restrict the specified code points to
#: render in the specified number of cells (defaulting to one cell).
#: this option can be specified multiple times. the syntax is::

#:     narrow_symbols codepoints [optionally the number of cells]

# disable_ligatures never

#: choose how you want to handle multi-character ligatures. the
#: default is to always render them. you can tell kitty to not render
#: them when the cursor is over them by using cursor to make editing
#: easier, or have kitty never render them at all by using always, if
#: you don't like them. the ligature strategy can be set per-window
#: either using the kitty remote control facility or by defining
#: shortcuts for it in kitty.conf, for example::

#:     map alt+1 disable_ligatures_in active always
#:     map alt+2 disable_ligatures_in all never
#:     map alt+3 disable_ligatures_in tab cursor

#: note that this refers to programming ligatures, typically
#: implemented using the calt opentype feature. for disabling general
#: ligatures, use the font_features option.

# font_features

#: e.g. font_features none

#: choose exactly which opentype features to enable or disable. this
#: is useful as some fonts might have features worthwhile in a
#: terminal. for example, fira code includes a discretionary feature,
#: zero, which in that font changes the appearance of the zero (0), to
#: make it more easily distinguishable from ø. fira code also includes
#: other discretionary features known as stylistic sets which have the
#: tags ss01 through ss20.

#: for the exact syntax to use for individual features, see the
#: harfbuzz documentation <https://harfbuzz.github.io/harfbuzz-hb-
#: common.html#hb-feature-from-string>.

#: note that this code is indexed by postscript name, and not the font
#: family. this allows you to define very precise feature settings;
#: e.g. you can disable a feature in the italic font but not in the
#: regular font.

#: on linux, font features are first read from the fontconfig database
#: and then this option is applied, so they can be configured in a
#: single, central place.

#: to get the postscript name for a font, use `kitty +list-fonts
#: --psnames`:

#: .. code-block:: sh

#:     $ kitty +list-fonts --psnames | grep fira
#:     fira code
#:     fira code bold (firacode-bold)
#:     fira code light (firacode-light)
#:     fira code medium (firacode-medium)
#:     fira code regular (firacode-regular)
#:     fira code retina (firacode-retina)

#: the part in brackets is the postscript name.

#: enable alternate zero and oldstyle numerals::

#:     font_features firacode-retina +zero +onum

#: enable only alternate zero in the bold font::

#:     font_features firacode-bold +zero

#: disable the normal ligatures, but keep the calt feature which (in
#: this font) breaks up monotony::

#:     font_features tt2020styleb-regular -liga +calt

#: in conjunction with force_ltr, you may want to disable arabic
#: shaping entirely, and only look at their isolated forms if they
#: show up in a document. you can do this with e.g.::

#:     font_features unifontmedium +isol -medi -fina -init

# modify_font

#: modify font characteristics such as the position or thickness of
#: the underline and strikethrough. the modifications can have the
#: suffix px for pixels or % for percentage of original value. no
#: suffix means use pts. for example::

#:     modify_font underline_position -2
#:     modify_font underline_thickness 150%
#:     modify_font strikethrough_position 2px

#: additionally, you can modify the size of the cell in which each
#: font glyph is rendered and the baseline at which the glyph is
#: placed in the cell. for example::

#:     modify_font cell_width 80%
#:     modify_font cell_height -2px
#:     modify_font baseline 3

#: note that modifying the baseline will automatically adjust the
#: underline and strikethrough positions by the same amount.
#: increasing the baseline raises glyphs inside the cell and
#: decreasing it lowers them. decreasing the cell size might cause
#: rendering artifacts, so use with care.

# box_drawing_scale 0.001, 1, 1.5, 2

#: the sizes of the lines used for the box drawing unicode characters.
#: these values are in pts. they will be scaled by the monitor dpi to
#: arrive at a pixel value. there must be four values corresponding to
#: thin, normal, thick, and very thick lines.

#: }}}

#: cursor customization {{{

# cursor #908caa

#: default cursor color. if set to the special value none the cursor
#: will be rendered with a "reverse video" effect. it's color will be
#: the color of the text in the cell it is over and the text will be
#: rendered with the background color of the cell. note that if the
#: program running in the terminal sets a cursor color, this takes
#: precedence. also, the cursor colors are modified if the cell
#: background and foreground colors have very low contrast.

# cursor_text_color #191724

#: the color of text under the cursor. if you want it rendered with
#: the background color of the cell underneath instead, use the
#: special keyword: background. note that if cursor is set to none
#: then this option is ignored.

# cursor_shape block

#: the cursor shape can be one of block, beam, underline. note that
#: when reloading the config this will be changed only if the cursor
#: shape has not been set by the program running in the terminal. this
#: sets the default cursor shape, applications running in the terminal
#: can override it. in particular, shell integration
#: <https://sw.kovidgoyal.net/kitty/shell-integration/> in kitty sets
#: the cursor shape to beam at shell prompts. you can avoid this by
#: setting shell_integration to no-cursor.

# cursor_beam_thickness 1.5

#: the thickness of the beam cursor (in pts).

# cursor_underline_thickness 2.0

#: the thickness of the underline cursor (in pts).

cursor_blink_interval 0

#: the interval to blink the cursor (in seconds). set to zero to
#: disable blinking. negative values mean use system default. note
#: that the minimum interval will be limited to repaint_delay.

# cursor_stop_blinking_after 15.0

#: stop blinking cursor after the specified number of seconds of
#: keyboard inactivity. set to zero to never stop blinking.

#: }}}

#: scrollback {{{

# scrollback_lines 2000

#: number of lines of history to keep in memory for scrolling back.
#: memory is allocated on demand. negative numbers are (effectively)
#: infinite scrollback. note that using very large scrollback is not
#: recommended as it can slow down performance of the terminal and
#: also use large amounts of ram. instead, consider using
#: scrollback_pager_history_size. note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

# scrollback_pager less --chop-long-lines --raw-control-chars +input_line_number

#: program with which to view scrollback in a new window. the
#: scrollback buffer is passed as stdin to this program. if you change
#: it, make sure the program you use can handle ansi escape sequences
#: for colors and text formatting. input_line_number in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen. similarly cursor_line and
#: cursor_column will be replaced by the current cursor position or
#: set to 0 if there is no cursor, for example, when showing the last
#: command output.

# scrollback_pager_history_size 0

#: separate scrollback history size (in mb), used only for browsing
#: the scrollback buffer with pager. this separate buffer is not
#: available for interactive scrolling but will be piped to the pager
#: program when viewing scrollback buffer in a separate window. the
#: current implementation stores the data in utf-8, so approximatively
#: 10000 lines per megabyte at 100 chars per line, for pure ascii,
#: unformatted text. a value of zero or less disables this feature.
#: the maximum allowed size is 4gb. note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

# scrollback_fill_enlarged_window no

#: fill new space with lines from the scrollback buffer after
#: enlarging a window.

# wheel_scroll_multiplier 5.0

#: multiplier for the number of lines scrolled by the mouse wheel.
#: note that this is only used for low precision scrolling devices,
#: not for high precision scrolling devices on platforms such as macos
#: and wayland. use negative numbers to change scroll direction. see
#: also wheel_scroll_min_lines.

# wheel_scroll_min_lines 1

#: the minimum number of lines scrolled by the mouse wheel. the scroll
#: multiplier wheel_scroll_multiplier only takes effect after it
#: reaches this number. note that this is only used for low precision
#: scrolling devices like wheel mice that scroll by very small amounts
#: when using the wheel. with a negative number, the minimum number of
#: lines will always be added.

# touch_scroll_multiplier 1.0

#: multiplier for the number of lines scrolled by a touchpad. note
#: that this is only used for high precision scrolling devices on
#: platforms such as macos and wayland. use negative numbers to change
#: scroll direction.

#: }}}

#: mouse {{{

# mouse_hide_wait 3.0

#: hide mouse cursor after the specified number of seconds of the
#: mouse not being used. set to zero to disable mouse cursor hiding.
#: set to a negative value to hide the mouse cursor immediately when
#: typing text. disabled by default on macos as getting it to work
#: robustly with the ever-changing sea of bugs that is cocoa is too
#: much effort.

# url_color #0087bd
# url_style curly

#: the color and style for highlighting urls on mouse-over. url_style
#: can be one of: none, straight, double, curly, dotted, dashed.

# open_url_with default

#: the program to open clicked urls. the special value default with
#: first look for any url handlers defined via the open_actions
#: <https://sw.kovidgoyal.net/kitty/open_actions/> facility and if non
#: are found, it will use the operating system's default url handler
#: (open on macos and xdg-open on linux).

# url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh

#: the set of url prefixes to look for when detecting a url under the
#: mouse cursor.

# detect_urls yes

#: detect urls under the mouse. detected urls are highlighted with an
#: underline and the mouse cursor becomes a hand over them. even if
#: this option is disabled, urls are still clickable.

# url_excluded_characters

#: additional characters to be disallowed from urls, when detecting
#: urls under the mouse cursor. by default, all characters that are
#: legal in urls are allowed.

# copy_on_select no

#: copy to clipboard or a private buffer on select. with this set to
#: clipboard, selecting text with the mouse will cause the text to be
#: copied to clipboard. useful on platforms such as macos that do not
#: have the concept of primary selection. you can instead specify a
#: name such as a1 to copy to a private kitty buffer. map a shortcut
#: with the paste_from_buffer action to paste from this private
#: buffer. for example::

#:     copy_on_select a1
#:     map shift+cmd+v paste_from_buffer a1

#: note that copying to the clipboard is a security risk, as all
#: programs, including websites open in your browser can read the
#: contents of the system clipboard.

# paste_actions quote-urls-at-prompt

#: a comma separated list of actions to take when pasting text into
#: the terminal. the supported paste actions are:

#: quote-urls-at-prompt:
#:     if the text being pasted is a url and the cursor is at a shell prompt,
#:     automatically quote the url (needs shell_integration).
#: confirm:
#:     confirm the paste if bracketed paste mode is not active or there is more
#:     a large amount of text being pasted.
#: filter:
#:     run the filter_paste() function from the file paste-actions.py in
#:     the kitty config directory on the pasted text. the text returned by the
#:     function will be actually pasted.

# strip_trailing_spaces never

#: remove spaces at the end of lines when copying to clipboard. a
#: value of smart will do it when using normal selections, but not
#: rectangle selections. a value of always will always do it.

# select_by_word_characters @-./_~?&=%+#

#: characters considered part of a word when double clicking. in
#: addition to these characters any character that is marked as an
#: alphanumeric character in the unicode database will be matched.

# select_by_word_characters_forward

#: characters considered part of a word when extending the selection
#: forward on double clicking. in addition to these characters any
#: character that is marked as an alphanumeric character in the
#: unicode database will be matched.

#: if empty (default) select_by_word_characters will be used for both
#: directions.

# click_interval -1.0

#: the interval between successive clicks to detect double/triple
#: clicks (in seconds). negative numbers will use the system default
#: instead, if available, or fallback to 0.5.

# focus_follows_mouse no

#: set the active window to the window under the mouse when moving the
#: mouse around.

# pointer_shape_when_grabbed arrow

#: the shape of the mouse pointer when the program running in the
#: terminal grabs the mouse. valid values are: arrow, beam and hand.

# default_pointer_shape beam

#: the default shape of the mouse pointer. valid values are: arrow,
#: beam and hand.

# pointer_shape_when_dragging beam

#: the default shape of the mouse pointer when dragging across text.
#: valid values are: arrow, beam and hand.

#: mouse actions {{{

#: mouse buttons can be mapped to perform arbitrary actions. the
#: syntax is:

#: .. code-block:: none

#:     mouse_map button-name event-type modes action

#: where button-name is one of left, middle, right, b1 ... b8 with
#: added keyboard modifiers. for example: ctrl+shift+left refers to
#: holding the ctrl+shift keys while clicking with the left mouse
#: button. the value b1 ... b8 can be used to refer to up to eight
#: buttons on a mouse.

#: event-type is one of press, release, doublepress, triplepress,
#: click, doubleclick. modes indicates whether the action is performed
#: when the mouse is grabbed by the program running in the terminal,
#: or not. the values are grabbed or ungrabbed or a comma separated
#: combination of them. grabbed refers to when the program running in
#: the terminal has requested mouse events. note that the click and
#: double click events have a delay of click_interval to disambiguate
#: from double and triple presses.

#: you can run kitty with the kitty --debug-input command line option
#: to see mouse events. see the builtin actions below to get a sense
#: of what is possible.

#: if you want to unmap an action, map it to no_op. for example, to
#: disable opening of urls with a plain click::

#:     mouse_map left click ungrabbed no_op

#: see all the mappable actions including mouse actions here
#: <https://sw.kovidgoyal.net/kitty/actions/>.

#: .. note::
#:     once a selection is started, releasing the button that started it will
#:     automatically end it and no release event will be dispatched.

# clear_all_mouse_actions no

#: remove all mouse action definitions up to this point. useful, for
#: instance, to remove the default mouse actions.

#: click the link under the mouse or move the cursor

# mouse_map left click ungrabbed mouse_handle_click selection link prompt

#::  first check for a selection and if one exists do nothing. then
#::  check for a link under the mouse cursor and if one exists, click
#::  it. finally check if the click happened at the current shell
#::  prompt and if so, move the cursor to the click location. note
#::  that this requires shell integration
#::  <https://sw.kovidgoyal.net/kitty/shell-integration/> to work.

#: click the link under the mouse or move the cursor even when grabbed

# mouse_map shift+left click grabbed,ungrabbed mouse_handle_click selection link prompt

#::  same as above, except that the action is performed even when the
#::  mouse is grabbed by the program running in the terminal.

#: click the link under the mouse cursor

# mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_handle_click link

#::  variant with ctrl+shift is present because the simple click based
#::  version has an unavoidable delay of click_interval, to
#::  disambiguate clicks from double clicks.

#: discard press event for link click

# mouse_map ctrl+shift+left press grabbed discard_event

#::  prevent this press event from being sent to the program that has
#::  grabbed the mouse, as the corresponding release event is used to
#::  open a url.

#: paste from the primary selection

# mouse_map middle release ungrabbed paste_from_selection

#: start selecting text

# mouse_map left press ungrabbed mouse_selection normal

#: start selecting text in a rectangle

# mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle

#: select a word

# mouse_map left doublepress ungrabbed mouse_selection word

#: select a line

# mouse_map left triplepress ungrabbed mouse_selection line

#: select line from point

# mouse_map ctrl+alt+left triplepress ungrabbed mouse_selection line_from_point

#::  select from the clicked point to the end of the line.

#: extend the current selection

# mouse_map right press ungrabbed mouse_selection extend

#::  if you want only the end of the selection to be moved instead of
#::  the nearest boundary, use move-end instead of extend.

#: paste from the primary selection even when grabbed

# mouse_map shift+middle release ungrabbed,grabbed paste_selection
# mouse_map shift+middle press grabbed discard_event

#: start selecting text even when grabbed

# mouse_map shift+left press ungrabbed,grabbed mouse_selection normal

#: start selecting text in a rectangle even when grabbed

# mouse_map ctrl+shift+alt+left press ungrabbed,grabbed mouse_selection rectangle

#: select a word even when grabbed

# mouse_map shift+left doublepress ungrabbed,grabbed mouse_selection word

#: select a line even when grabbed

# mouse_map shift+left triplepress ungrabbed,grabbed mouse_selection line

#: select line from point even when grabbed

# mouse_map ctrl+shift+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point

#::  select from the clicked point to the end of the line even when
#::  grabbed.

#: extend the current selection even when grabbed

# mouse_map shift+right press ungrabbed,grabbed mouse_selection extend

#: show clicked command output in pager

# mouse_map ctrl+shift+right press ungrabbed mouse_show_command_output

#::  requires shell integration
#::  <https://sw.kovidgoyal.net/kitty/shell-integration/> to work.

#: }}}

#: }}}

#: performance tuning {{{

# repaint_delay 10

#: delay between screen updates (in milliseconds). decreasing it,
#: increases frames-per-second (fps) at the cost of more cpu usage.
#: the default value yields ~100 fps which is more than sufficient for
#: most uses. note that to actually achieve 100 fps, you have to
#: either set sync_to_monitor to no or use a monitor with a high
#: refresh rate. also, to minimize latency when there is pending input
#: to be processed, this option is ignored.

# input_delay 3

#: delay before input from the program running in the terminal is
#: processed (in milliseconds). note that decreasing it will increase
#: responsiveness, but also increase cpu usage and might cause flicker
#: in full screen programs that redraw the entire screen on each loop,
#: because kitty is so fast that partial screen updates will be drawn.

# sync_to_monitor yes

#: sync screen updates to the refresh rate of the monitor. this
#: prevents screen tearing
#: <https://en.wikipedia.org/wiki/screen_tearing> when scrolling.
#: however, it limits the rendering speed to the refresh rate of your
#: monitor. with a very high speed mouse/high keyboard repeat rate,
#: you may notice some slight input latency. if so, set this to no.

#: }}}

#: terminal bell {{{

# enable_audio_bell yes

#: the audio bell. useful to disable it in environments that require
#: silence.

# visual_bell_duration 0.0

#: the visual bell duration (in seconds). flash the screen when a bell
#: occurs for the specified number of seconds. set to zero to disable.

# visual_bell_color none

#: the color used by visual bell. set to none will fall back to
#: selection background color. if you feel that the visual bell is too
#: bright, you can set it to a darker color.

# window_alert_on_bell yes

#: request window attention on bell. makes the dock icon bounce on
#: macos or the taskbar flash on linux.

# bell_on_tab "🔔 "

#: some text or a unicode symbol to show on the tab if a window in the
#: tab that does not have focus has a bell. if you want to use leading
#: or trailing spaces, surround the text with quotes. see
#: tab_title_template for how this is rendered.

#: for backwards compatibility, values of yes, y and true are
#: converted to the default bell symbol and no, n, false and none are
#: converted to the empty string.

# command_on_bell none

#: program to run when a bell occurs. the environment variable
#: kitty_child_cmdline can be used to get the program running in the
#: window in which the bell occurred.

# bell_path none

#: path to a sound file to play as the bell sound. if set to none, the
#: system default bell sound is used. must be in a format supported by
#: the operating systems sound api, such as wav or oga on linux
#: (libcanberra) or aiff, mp3 or wav on macos (nssound)

#: }}}

#: window layout {{{

remember_window_size  yes
# initial_window_width  640
# initial_window_height 400

#: if enabled, the window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. if disabled, the window will initially have size
#: configured by initial_window_width/height, in pixels. you can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.

# enabled_layouts *

#: the enabled window layouts. a comma separated list of layout names.
#: the special value all means all layouts. the first listed layout
#: will be used as the startup layout. default configuration is all
#: layouts in alphabetical order. for a list of available layouts, see
#: the layouts <https://sw.kovidgoyal.net/kitty/overview/#layouts>.

# window_resize_step_cells 2
# window_resize_step_lines 2

#: the step size (in units of cell width/cell height) to use when
#: resizing kitty windows in a layout with the shortcut
#: start_resizing_window. the cells value is used for horizontal
#: resizing, and the lines value is used for vertical resizing.

# window_border_width 0.5pt

#: the width of window borders. can be either in pixels (px) or pts
#: (pt). values in pts will be rounded to the nearest number of pixels
#: based on screen resolution. if not specified, the unit is assumed
#: to be pts. note that borders are displayed only when more than one
#: window is visible. they are meant to separate multiple windows.

# draw_minimal_borders yes

#: draw only the minimum borders needed. this means that only the
#: borders that separate the inactive window from a neighbor are
#: drawn. note that setting a non-zero window_margin_width overrides
#: this and causes all borders to be drawn.

# window_margin_width 0

#: the window margin (in pts) (blank area outside the border). a
#: single value sets all four sides. two values set the vertical and
#: horizontal sides. three values set top, horizontal and bottom. four
#: values set top, right, bottom and left.

# single_window_margin_width -1

#: the window margin to use when only a single window is visible (in
#: pts). negative values will cause the value of window_margin_width
#: to be used instead. a single value sets all four sides. two values
#: set the vertical and horizontal sides. three values set top,
#: horizontal and bottom. four values set top, right, bottom and left.

# window_padding_width 0

#: the window padding (in pts) (blank area between the text and the
#: window border). a single value sets all four sides. two values set
#: the vertical and horizontal sides. three values set top, horizontal
#: and bottom. four values set top, right, bottom and left.

# placement_strategy center

#: when the window size is not an exact multiple of the cell size, the
#: cell area of the terminal window will have some extra padding on
#: the sides. you can control how that padding is distributed with
#: this option. using a value of center means the cell area will be
#: placed centrally. a value of top-left means the padding will be
#: only at the bottom and right edges.

# active_border_color #00ff00

#: the color for the border of the active window. set this to none to
#: not draw borders around the active window.

# inactive_border_color #cccccc

#: the color for the border of inactive windows.

# bell_border_color #ff5a00

#: the color for the border of inactive windows in which a bell has
#: occurred.

# inactive_text_alpha 1.0

#: fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).

# hide_window_decorations no

#: hide the window decorations (title-bar and window borders) with
#: yes. on macos, titlebar-only can be used to only hide the titlebar.
#: whether this works and exactly what effect it has depends on the
#: window manager/operating system. note that the effects of changing
#: this option when reloading config are undefined.

# window_logo_path none

#: path to a logo image. must be in png format. relative paths are
#: interpreted relative to the kitty config directory. the logo is
#: displayed in a corner of every kitty window. the position is
#: controlled by window_logo_position. individual windows can be
#: configured to have different logos either using the launch action
#: or the remote control <https://sw.kovidgoyal.net/kitty/remote-
#: control/> facility.

# window_logo_position bottom-right

#: where to position the window logo in the window. the value can be
#: one of: top-left, top, top-right, left, center, right, bottom-left,
#: bottom, bottom-right.

# window_logo_alpha 0.5

#: the amount the logo should be faded into the background. with zero
#: being fully faded and one being fully opaque.

# resize_debounce_time 0.1

#: the time to wait before redrawing the screen when a resize event is
#: received (in seconds). on platforms such as macos, where the
#: operating system sends events corresponding to the start and end of
#: a resize, this number is ignored.

# resize_draw_strategy static

#: choose how kitty draws a window while a resize is in progress. a
#: value of static means draw the current window contents, mostly
#: unchanged. a value of scale means draw the current window contents
#: scaled. a value of blank means draw a blank window. a value of size
#: means show the window size in cells.

# resize_in_steps no

#: resize the os window in steps as large as the cells, instead of
#: with the usual pixel accuracy. combined with initial_window_width
#: and initial_window_height in number of cells, this option can be
#: used to keep the margins as small as possible when resizing the os
#: window. note that this does not currently work on wayland.

# visual_window_select_characters 1234567890abcdefghijklmnopqrstuvwxyz

#: the list of characters for visual window selection. for example,
#: for selecting a window to focus on with focus_visible_window. the
#: value should be a series of unique numbers or alphabets, case
#: insensitive, from the set [0-9a-z]. specify your preference as a
#: string of characters.

# confirm_os_window_close -1

#: ask for confirmation when closing an os window or a tab with at
#: least this number of kitty windows in it by window manager (e.g.
#: clicking the window close button or pressing the operating system
#: shortcut to close windows) or by the close_tab action. a value of
#: zero disables confirmation. this confirmation also applies to
#: requests to quit the entire application (all os windows, via the
#: quit action). negative values are converted to positive ones,
#: however, with shell_integration enabled, using negative values
#: means windows sitting at a shell prompt are not counted, only
#: windows where some command is currently running. note that if you
#: want confirmation when closing individual windows, you can map the
#: close_window_with_confirmation action.

#: }}}

#: tab bar {{{

tab_bar_edge top

#: the edge to show the tab bar on, top or bottom.

# tab_bar_margin_width 0.0

#: the margin to the left and right of the tab bar (in pts).

# tab_bar_margin_height 0.0 0.0

#: the margin above and below the tab bar (in pts). the first number
#: is the margin between the edge of the os window and the tab bar.
#: the second number is the margin between the tab bar and the
#: contents of the current tab.

tab_bar_style fade

#: the tab bar style, can be one of:

#: fade
#:     each tab's edges fade into the background color. (see also tab_fade)
#: slant
#:     tabs look like the tabs in a physical file.
#: separator
#:     tabs are separated by a configurable separator. (see also
#:     tab_separator)
#: powerline
#:     tabs are shown as a continuous line with "fancy" separators.
#:     (see also tab_powerline_style)
#: custom
#:     a user-supplied python function called draw_tab is loaded from the file
#:     tab_bar.py in the kitty config directory. for examples of how to
#:     write such a function, see the functions named draw_tab_with_* in
#:     kitty's source code: kitty/tab_bar.py. see also
#:     this discussion <https://github.com/kovidgoyal/kitty/discussions/4447>
#:     for examples from kitty users.
#: hidden
#:     the tab bar is hidden. if you use this, you might want to create a mapping
#:     for the select_tab action which presents you with a list of tabs and
#:     allows for easy switching to a tab.

tab_bar_align center

#: the horizontal alignment of the tab bar, can be one of: left,
#: center, right.

# tab_bar_min_tabs 3

#: the minimum number of tabs that must exist before the tab bar is
#: shown.

# tab_switch_strategy previous

#: the algorithm to use when switching to a tab when the current tab
#: is closed. the default of previous will switch to the last used
#: tab. a value of left will switch to the tab to the left of the
#: closed tab. a value of right will switch to the tab to the right of
#: the closed tab. a value of last will switch to the right-most tab.

# tab_fade 0.25 0.5 0.75 1

#: control how each tab fades into the background when using fade for
#: the tab_bar_style. each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. you
#: can change the number of cells used by adding/removing entries to
#: this list.

# tab_separator "  "

#: the separator between tabs in the tab bar when using separator as
#: the tab_bar_style.

# tab_powerline_style angled

#: the powerline separator style between tabs in the tab bar when
#: using powerline as the tab_bar_style, can be one of: angled,
#: slanted, round.

# tab_activity_symbol none

#: some text or a unicode symbol to show on the tab if a window in the
#: tab that does not have focus has some activity. if you want to use
#: leading or trailing spaces, surround the text with quotes. see
#: tab_title_template for how this is rendered.

# tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{title}"

#: a template to render the tab title. the default just renders the
#: title with optional symbols for bell and activity. if you wish to
#: include the tab-index as well, use something like: {index}:{title}.
#: useful if you have shortcuts mapped for goto_tab n. if you prefer
#: to see the index as a superscript, use {sup.index}. all data
#: available is:

#: title
#:     the current tab title.
#: index
#:     the tab index useable with goto_tab n goto_tab shortcuts.
#: layout_name
#:     the current layout name.
#: num_windows
#:     the number of windows in the tab.
#: num_window_groups
#:     the number of window groups (not counting overlay windows) in the tab.
#: tab.active_wd
#:     the working directory of the currently active window in the tab (expensive,
#:     requires syscall).
#: max_title_length
#:     the maximum title length available.

#: note that formatting is done by python's string formatting
#: machinery, so you can use, for instance, {layout_name[:2].upper()}
#: to show only the first two letters of the layout name, upper-cased.
#: if you want to style the text, you can use styling directives, for
#: example:
#: `{fmt.fg.red}red{fmt.fg.tab}normal{fmt.bg._00ff00}greenbg{fmt.bg.tab}`.
#: similarly, for bold and italic:
#: `{fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}`.
#: note that for backward compatibility, if {bell_symbol} or
#: {activity_symbol} are not present in the template, they are
#: prepended to it.

# active_tab_title_template none

#: template to use for active tabs. if not specified falls back to
#: tab_title_template.

# active_tab_foreground   #191
# active_tab_background   #911
# active_tab_font_style   bold-italic
# inactive_tab_foreground #6e6a86
# inactive_tab_background #191724
# inactive_tab_font_style normal

#: tab bar colors and styles.

# tab_bar_background none

#: background color for the tab bar. defaults to using the terminal
#: background color.

# tab_bar_margin_color #ebbcba

#: color for the tab bar margin area. defaults to using the terminal
#: background color.

#: }}}

#: color scheme {{{

include themes/carbonfox.conf
# include themes/rose-pine.conf
# include themes/nightfox.conf
# include themes/tokyonight.conf
# include themes/catppuccin-mocha.conf

#: the foreground and background colors.
# foreground #dddddd
# background #0000ff

# background_opacity 1.0

#: the opacity of the background. a number between zero and one, where
#: one is opaque and zero is fully transparent. this will only work if
#: supported by the os (for instance, when using a compositor under
#: x11). note that it only sets the background color's opacity in
#: cells that have the same background color as the default terminal
#: background, so that things like the status bar in vim, powerline
#: prompts, etc. still look good. but it means that if you use a color
#: theme with a background color in your editor, it will not be
#: rendered as transparent. instead you should change the default
#: background color in your kitty config and not use a background
#: color in the editor color scheme. or use the escape codes to set
#: the terminals default colors in a shell script to launch your
#: editor. be aware that using a value less than 1.0 is a (possibly
#: significant) performance hit. if you want to dynamically change
#: transparency of windows, set dynamic_background_opacity to yes
#: (this is off by default as it has a performance cost). changing
#: this option when reloading the config will only work if
#: dynamic_background_opacity was enabled in the original config.

# background_image ~/.config/kitty/imgs/5-1.png

#: path to a background image. must be in png format.

# background_image_layout scaled

#: whether to tile, scale or clamp the background image. the value can
#: be one of tiled, mirror-tiled, scaled, clamped or centered.

# background_image_linear no

#: when background image is scaled, whether linear interpolation
#: should be used.

# dynamic_background_opacity no

#: allow changing of the background_opacity dynamically, using either
#: keyboard shortcuts (increase_background_opacity and
#: decrease_background_opacity) or the remote control facility.
#: changing this option by reloading the config is not supported.

# background_tint 0.7

#: how much to tint the background image by the background color.
#: this option makes it easier to read the text. tinting is done using
#: the current background color for each window. this option applies
#: only if background_opacity is set and transparent windows are
#: supported or background_image is set.

# dim_opacity 0.75

#: how much to dim text that has the dim/faint attribute set. one
#: means no dimming and zero means fully dimmed (i.e. invisible).

# selection_foreground #000000
# selection_background #fffacd

#: the foreground and background colors for text selected with the
#: mouse. setting both of these to none will cause a "reverse video"
#: effect for selections, where the selection will be the cell text
#: color and the text will become the cell background color. setting
#: only selection_foreground to none will cause the foreground color
#: to be used unchanged. note that these colors can be overridden by
#: the program running in the terminal.

#: the color table {{{

#: the 256 terminal colors. there are 8 basic colors, each color has a
#: dull and bright version, for the first 16 colors. you can set the
#: remaining 240 colors as color16 to color255.

# color0 #000000
# color8 #767676

#: black

# color1 #cc0403
# color9 #f2201f

#: red

# color2  #19cb00
# color10 #23fd00

#: green

# color3  #cecb00
# color11 #fffd00

#: yellow

# color4  #0d73cc
# color12 #1a8fff

#: blue

# color5  #cb1ed1
# color13 #fd28ff

#: magenta

# color6  #0dcdcd
# color14 #14ffff

#: cyan

# color7  #dddddd
# color15 #ffffff

#: white

# mark1_foreground black

#: color for marks of type 1

# mark1_background #98d3cb

#: color for marks of type 1 (light steel blue)

# mark2_foreground black

#: color for marks of type 2

# mark2_background #f2dcd3

#: color for marks of type 1 (beige)

# mark3_foreground black

#: color for marks of type 3

# mark3_background #f274bc

#: color for marks of type 3 (violet)

#: }}}

#: }}}

#: advanced {{{

# shell .

#: the shell program to execute. the default value of . means to use
#: whatever shell is set as the default shell for the current user.
#: note that on macos if you change this, you might need to add
#: --login and --interactive to ensure that the shell starts in
#: interactive mode and reads its startup rc files.

# editor .

#: the terminal based text editor (such as vim or nano) to use when
#: editing the kitty config file or similar tasks.

#: the default value of . means to use the environment variables
#: visual and editor in that order. if these variables aren't set,
#: kitty will run your shell ($shell -l -i -c env) to see if your
#: shell startup rc files set visual or editor. if that doesn't work,
#: kitty will cycle through various known editors (vim, emacs, etc.)
#: and take the first one that exists on your system.

# close_on_child_death no

#: close the window when the child process (shell) exits. with the
#: default value no, the terminal will remain open when the child
#: exits as long as there are still processes outputting to the
#: terminal (for example disowned or backgrounded processes). when
#: enabled with yes, the window will close as soon as the child
#: process exits. note that setting it to yes means that any
#: background processes still using the terminal can fail silently
#: because their stdout/stderr/stdin no longer work.

# remote_control_password

#: allow other programs to control kitty using passwords. this option
#: can be specified multiple times to add multiple passwords. if no
#: passwords are present kitty will ask the user for permission if a
#: program tries to use remote control with a password. a password can
#: also *optionally* be associated with a set of allowed remote
#: control actions. for example::

#:     remote_control_password "my passphrase" get-colors set-colors focus-window focus-tab

#: only the specified actions will be allowed when using this
#: password. glob patterns can be used too, for example::

#:     remote_control_password "my passphrase" set-tab-* resize-*

#: to get a list of available actions, run::

#:     kitty @ --help

#: a set of actions to be allowed when no password is sent can be
#: specified by using an empty password, for example::

#:     remote_control_password "" *-colors

#: finally, the path to a python module can be specified that provides
#: a function is_cmd_allowed that is used to check every remote
#: control command. see rc_custom_auth
#: <https://sw.kovidgoyal.net/kitty/remote-control/#rc-custom-auth>
#: for details. for example::

#:     remote_control_password "my passphrase" my_rc_command_checker.py

#: relative paths are resolved from the kitty configuration directory.

allow_remote_control socket-only

#: allow other programs to control kitty. if you turn this on, other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc. note that this even works over ssh
#: connections. the default setting of no prevents any form of remote
#: control. the meaning of the various values are:

#: password
#:    remote control requests received over both the tty device and the socket are
#:    confirmed based on passwords, see remote_control_password.

#: socket-only
#:    remote control requests received over a socket are accepted unconditionally.
#:    requests received over the tty are denied. see listen_on.

#: socket
#:    remote control requests received over a socket are accepted unconditionally.
#:    requests received over the tty are confirmed based on password.

#: no
#:    remote control is completely disabled.

#: yes
#:    remote control requests are always accepted.

listen_on unix:/tmp/kitty

#: listen to the specified unix socket for remote control connections.
#: note that this will apply to all kitty instances. it can be
#: overridden by the kitty --listen-on command line option, which also
#: supports listening on a tcp socket. this option accepts only unix
#: sockets, such as unix:${temp}/mykitty or unix:@mykitty (on linux).
#: environment variables are expanded and relative paths are resolved
#: with respect to the temporary directory. if {kitty_pid} is present,
#: then it is replaced by the pid of the kitty process, otherwise the
#: pid of the kitty process is appended to the value, with a hyphen.
#: see the help for kitty --listen-on for more details. note that this
#: will be ignored unless allow_remote_control is set to either: yes,
#: socket or socket-only. changing this option by reloading the config
#: is not supported.

# env

#: specify the environment variables to be set in all child processes.
#: using the name with an equal sign (e.g. env var=) will set it to
#: the empty string. specifying only the name (e.g. env var) will
#: remove the variable from the child process' environment. note that
#: environment variables are expanded recursively, for example::

#:     env var1=a
#:     env var2=${home}/${var1}/b

#: the value of var2 will be <path to home directory>/a/b.

# watcher

#: path to python file which will be loaded for watchers
#: <https://sw.kovidgoyal.net/kitty/launch/#watchers>. can be
#: specified more than once to load multiple watchers. the watchers
#: will be added to every kitty window. relative paths are resolved
#: relative to the kitty config directory. note that reloading the
#: config will only affect windows created after the reload.

# exe_search_path

#: control where kitty finds the programs to run. the default search
#: order is: first search the system wide path, then ~/.local/bin and
#: ~/bin. if still not found, the path defined in the login shell
#: after sourcing all its startup files is tried. finally, if present,
#: the path specified by the env option is tried.

#: this option allows you to prepend, append, or remove paths from
#: this search order. it can be specified multiple times for multiple
#: paths. a simple path will be prepended to the search order. a path
#: that starts with the + sign will be append to the search order,
#: after ~/bin above. a path that starts with the - sign will be
#: removed from the entire search order. for example::

#:     exe_search_path /some/prepended/path
#:     exe_search_path +/some/appended/path
#:     exe_search_path -/some/excluded/path

# update_check_interval 24

#: the interval to periodically check if an update to kitty is
#: available (in hours). if an update is found, a system notification
#: is displayed informing you of the available update. the default is
#: to check every 24 hours, set to zero to disable. update checking is
#: only done by the official binary builds. distro packages or source
#: builds do not do update checking. changing this option by reloading
#: the config is not supported.

# startup_session none

#: path to a session file to use for all kitty instances. can be
#: overridden by using the kitty --session command line option for
#: individual instances. see sessions
#: <https://sw.kovidgoyal.net/kitty/overview/#sessions> in the kitty
#: documentation for details. note that relative paths are interpreted
#: with respect to the kitty config directory. environment variables
#: in the path are expanded. changing this option by reloading the
#: config is not supported.

# clipboard_control write-clipboard write-primary read-clipboard-ask read-primary-ask

#: allow programs running in kitty to read and write from the
#: clipboard. you can control exactly which actions are allowed. the
#: possible actions are: write-clipboard, read-clipboard, write-
#: primary, read-primary, read-clipboard-ask, read-primary-ask. the
#: default is to allow writing to the clipboard and primary selection
#: and to ask for permission when a program tries to read from the
#: clipboard. note that disabling the read confirmation is a security
#: risk as it means that any program, even the ones running on a
#: remote server via ssh can read your clipboard. see also
#: clipboard_max_size.

# clipboard_max_size 64

#: the maximum size (in mb) of data from programs running in kitty
#: that will be stored for writing to the system clipboard. a value of
#: zero means no size limit is applied. see also clipboard_control.

# file_transfer_confirmation_bypass

#: the password that can be supplied to the file transfer kitten
#: <https://sw.kovidgoyal.net/kitty/kittens/transfer/> to skip the
#: transfer confirmation prompt. this should only be used when
#: initiating transfers from trusted computers, over trusted networks
#: or encrypted transports, as it allows any programs running on the
#: remote machine to read/write to the local filesystem, without
#: permission.

# allow_hyperlinks yes

#: process hyperlink escape sequences (osc 8). if disabled osc 8
#: escape sequences are ignored. otherwise they become clickable
#: links, that you can click with the mouse or by using the hints
#: kitten <https://sw.kovidgoyal.net/kitty/kittens/hints/>. the
#: special value of ask means that kitty will ask before opening the
#: link when clicked.

# shell_integration enabled

#: enable shell integration on supported shells. this enables features
#: such as jumping to previous prompts, browsing the output of the
#: previous command in a pager, etc. on supported shells. set to
#: disabled to turn off shell integration, completely. it is also
#: possible to disable individual features, set to a space separated
#: list of these values: no-rc, no-cursor, no-title, no-cwd, no-
#: prompt-mark, no-complete. see shell integration
#: <https://sw.kovidgoyal.net/kitty/shell-integration/> for details.

# allow_cloning ask

#: control whether programs running in the terminal can request new
#: windows to be created. the canonical example is clone-in-kitty
#: <https://sw.kovidgoyal.net/kitty/shell-integration/#clone-shell>.
#: by default, kitty will ask for permission for each clone request.
#: allowing cloning unconditionally gives programs running in the
#: terminal (including over ssh) permission to execute arbitrary code,
#: as the user who is running the terminal, on the computer that the
#: terminal is running on.

# clone_source_strategies venv,conda,env_var,path

#: control what shell code is sourced when running clone-in-kitty in
#: the newly cloned window. the supported strategies are:

#: venv
#:     source the file $virtual_env/bin/activate. this is used by the
#:     python stdlib venv module and allows cloning venvs automatically.
#: conda
#:     run conda activate $conda_default_env. this supports the virtual
#:     environments created by conda.
#: env_var
#:     execute the contents of the environment variable
#:     kitty_clone_source_code with eval.
#: path
#:     source the file pointed to by the environment variable
#:     kitty_clone_source_path.

#: this option must be a comma separated list of the above values.
#: this only source the first valid one in the above order.

# term xterm-kitty

#: the value of the term environment variable to set. changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on "stack overflow"
#: to change it. the term variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. if
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work. changing this option by reloading the config will only affect
#: newly created windows.

#: }}}

#: os specific tweaks {{{

# wayland_titlebar_color system

#: the color of the kitty window's titlebar on wayland systems with
#: client side window decorations such as gnome. a value of system
#: means to use the default system color, a value of background means
#: to use the background color of the currently active window and
#: finally you can use an arbitrary color, such as #12af59 or red.

# macos_titlebar_color #191723
#: The color of the kitty window's titlebar on macOS. A value of
#: system means to use the default system color, light or dark can
#: also be used to set it explicitly. A value of background means to
#: use the background color of the currently active window and finally
#: you can use an arbitrary color, such as #12af59 or red. WARNING:
#: This option works by using a hack when arbitrary color (or
#: background) is configured, as there is no proper Cocoa API for it.
#: It sets the background color of the entire window and makes the
#: titlebar transparent. As such it is incompatible with
#: background_opacity. If you want to use both, you are probably
#: better off just hiding the titlebar with hide_window_decorations.

macos_option_as_alt yes

#: Use the Option key as an Alt key on macOS. With this set to no,
#: kitty will use the macOS native Option+Key to enter Unicode
#: character behavior. This will break any Alt+Key keyboard shortcuts
#: in your terminal programs, but you can use the macOS Unicode input
#: technique. You can use the values: left, right or both to use only
#: the left, right or both Option keys as Alt, instead. Note that
#: kitty itself always treats Option the same as Alt. This means you
#: cannot use this option to configure different kitty shortcuts for
#: Option+Key vs. Alt+Key. Also, any kitty shortcuts using
#: Option/Alt+Key will take priority, so that any such key presses
#: will not be passed to terminal programs running inside kitty.
#: Changing this option by reloading the config is not supported.

# macos_hide_from_tasks no

#: Hide the kitty window from running tasks on macOS (⌘+Tab and the
#: Dock). Changing this option by reloading the config is not
#: supported.

# macos_quit_when_last_window_closed no

#: Have kitty quit when all the top-level windows are closed on macOS.
#: By default, kitty will stay running, even with no open windows, as
#: is the expected behavior on macOS.

# macos_window_resizable yes

#: Disable this if you want kitty top-level OS windows to not be
#: resizable on macOS. Changing this option by reloading the config
#: will only affect newly created OS windows.

# macos_thicken_font 0

#: Draw an extra border around the font with the given width, to
#: increase legibility at small font sizes on macOS. For example, a
#: value of 0.75 will result in rendering that looks similar to sub-
#: pixel antialiasing at common font sizes.

# macos_traditional_fullscreen no

#: Use the macOS traditional full-screen transition, that is faster,
#: but less pretty.

# macos_show_window_title_in all

#: Control where the window title is displayed on macOS. A value of
#: window will show the title of the currently active window at the
#: top of the macOS window. A value of menubar will show the title of
#: the currently active window in the macOS global menu bar, making
#: use of otherwise wasted space. A value of all will show the title
#: in both places, and none hides the title. See
#: macos_menubar_title_max_length for how to control the length of the
#: title in the menu bar.

# macos_menubar_title_max_length 0

#: The maximum number of characters from the window title to show in
#: the macOS global menu bar. Values less than one means that there is
#: no maximum limit.

# macos_custom_beam_cursor no

#: Use a custom mouse cursor for macOS that is easier to see on both
#: light and dark backgrounds. Nowadays, the default macOS cursor
#: already comes with a white border. WARNING: this might make your
#: mouse cursor invisible on dual GPU machines. Changing this option
#: by reloading the config is not supported.

# macos_colorspace srgb

#: The colorspace in which to interpret terminal colors. The default
#: of srgb will cause colors to match those seen in web browsers. The
#: value of default will use whatever the native colorspace of the
#: display is. The value of displayp3 will use Apple's special
#: snowflake display P3 color space, which will result in over
#: saturated (brighter) colors with some color shift. Reloading
#: configuration will change this value only for newly created OS
#: windows.

# linux_display_server auto

#: Choose between Wayland and X11 backends. By default, an appropriate
#: backend based on the system state is chosen automatically. Set it
#: to x11 or wayland to force the choice. Changing this option by
#: reloading the config is not supported.

#: }}}

#: Keyboard shortcuts {{{

#: Keys are identified simply by their lowercase Unicode characters.
#: For example: a for the A key, [ for the left square bracket key,
#: etc. For functional keys, such as Enter or Escape, the names are
#: present at Functional key definitions
#: <https://sw.kovidgoyal.net/kitty/keyboard-protocol/#functional>.
#: For modifier keys, the names are ctrl (control, ⌃), shift (⇧), alt
#: (opt, option, ⌥), super (cmd, command, ⌘). See also: GLFW mods
#: <https://www.glfw.org/docs/latest/group__mods.html>

#: On Linux you can also use XKB key names to bind keys that are not
#: supported by GLFW. See XKB keys
#: <https://github.com/xkbcommon/libxkbcommon/blob/master/include/xkbcommon/xkbcommon-
#: keysyms.h> for a list of key names. The name to use is the part
#: after the XKB_KEY_ prefix. Note that you can only use an XKB key
#: name for keys that are not known as GLFW keys.

#: Finally, you can use raw system key codes to map keys, again only
#: for keys that are not known as GLFW keys. To see the system key
#: code for a key, start kitty with the kitty --debug-input option,
#: kitty will output some debug text for every key event. In that text
#: look for native_code, the value of that becomes the key name in the
#: shortcut. For example:

#: .. code-block:: none

#:     on_key_input: glfw key: 0x61 native_code: 0x61 action: PRESS mods: none text: 'a'

#: Here, the key name for the A key is 0x61 and you can use it with::

#:     map ctrl+0x61 something

#: to map Ctrl+A to something.

#: You can use the special action no_op to unmap a keyboard shortcut
#: that is assigned in the default configuration::

#:     map kitty_mod+space no_op

#: If you would like kitty to completely ignore a key event, not even
#: sending it to the program running in the terminal, map it to
#: discard_event::

#:     map kitty_mod+f1 discard_event

#: You can combine multiple actions to be triggered by a single
#: shortcut with combine action, using the syntax below::

#:     map key combine <separator> action1 <separator> action2 <separator> action3 ...

#: For example::

#:     map kitty_mod+e combine : new_window : next_layout

#: This will create a new window and switch to the next available
#: layout.

#: You can use multi-key shortcuts with the syntax shown below::

#:     map key1>key2>key3 action

#: For example::

#:     map ctrl+f>2 set_font_size 20

#: The full list of actions that can be mapped to key presses is
#: available here <https://sw.kovidgoyal.net/kitty/actions/>.

# kitty_mod ctrl+shift

#: Special modifier key alias for default shortcuts. You can change
#: the value of this option to alter all default shortcuts that use
#: kitty_mod.

# clear_all_shortcuts no

#: Remove all shortcut definitions up to this point. Useful, for
#: instance, to remove the default shortcuts.

# action_alias

#: E.g. action_alias launch_tab launch --type=tab --cwd=current

#: Define action aliases to avoid repeating the same options in
#: multiple mappings. Aliases can be defined for any action and will
#: be expanded recursively. For example, the above alias allows you to
#: create mappings to launch a new tab in the current working
#: directory without duplication::

#:     map f1 launch_tab vim
#:     map f2 launch_tab emacs

#: Similarly, to alias kitten invocation::

#:     action_alias hints kitten hints --hints-offset=0

# kitten_alias

#: E.g. kitten_alias hints hints --hints-offset=0

#: Like action_alias above, but specifically for kittens. Generally,
#: prefer to use action_alias. This option is a legacy version,
#: present for backwards compatibility. It causes all invocations of
#: the aliased kitten to be substituted. So the example above will
#: cause all invocations of the hints kitten to have the --hints-
#: offset=0 option applied.

#: Clipboard {{{

#: Copy to clipboard

# map kitty_mod+c copy_to_clipboard
# map cmd+c       copy_to_clipboard

#::  There is also a copy_or_interrupt action that can be optionally
#::  mapped to Ctrl+C. It will copy only if there is a selection and
#::  send an interrupt otherwise. Similarly,
#::  copy_and_clear_or_interrupt will copy and clear the selection or
#::  send an interrupt if there is no selection.

#: Paste from clipboard

# map kitty_mod+v paste_from_clipboard
# map cmd+v       paste_from_clipboard

#: Paste from selection

# map kitty_mod+s  paste_from_selection
# map shift+insert paste_from_selection

#: Pass selection to program

# map kitty_mod+o pass_selection_to_program

#::  You can also pass the contents of the current selection to any
#::  program with pass_selection_to_program. By default, the system's
#::  open program is used, but you can specify your own, the selection
#::  will be passed as a command line argument to the program. For
#::  example::

#::      map kitty_mod+o pass_selection_to_program firefox

#::  You can pass the current selection to a terminal program running
#::  in a new kitty window, by using the @selection placeholder::

#::      map kitty_mod+y new_window less @selection

#: }}}

#: Scrolling {{{

#: Scroll line up

# map kitty_mod+up    scroll_line_up
# map kitty_mod+k     scroll_line_up
# map opt+cmd+page_up scroll_line_up
# map cmd+up          scroll_line_up

#: Scroll line down

# map kitty_mod+down    scroll_line_down
# map kitty_mod+j       scroll_line_down
# map opt+cmd+page_down scroll_line_down
# map cmd+down          scroll_line_down

#: Scroll page up

# map kitty_mod+page_up scroll_page_up
# map cmd+page_up       scroll_page_up

#: Scroll page down

# map kitty_mod+page_down scroll_page_down
# map cmd+page_down       scroll_page_down

#: Scroll to top

# map kitty_mod+home scroll_home
# map cmd+home       scroll_home

#: Scroll to bottom

# map kitty_mod+end scroll_end
# map cmd+end       scroll_end

#: Scroll to previous shell prompt

# map kitty_mod+z scroll_to_prompt -1

#::  Use a parameter of 0 for scroll_to_prompt to scroll to the last
#::  jumped to or the last clicked position. Requires shell
#::  integration <https://sw.kovidgoyal.net/kitty/shell-integration/>
#::  to work.

#: Scroll to next shell prompt

# map kitty_mod+x scroll_to_prompt 1

#: Browse scrollback buffer in pager

# map kitty_mod+h show_scrollback

#::  You can pipe the contents of the current screen and history
#::  buffer as STDIN to an arbitrary program using launch --stdin-
#::  source. For example, the following opens the scrollback buffer in
#::  less in an overlay window::

#::      map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

#::  For more details on piping screen and buffer contents to external
#::  programs, see launch <https://sw.kovidgoyal.net/kitty/launch/>.

#: Browse output of the last shell command in pager

# map kitty_mod+g show_last_command_output

#::  You can also define additional shortcuts to get the command
#::  output. For example, to get the first command output on screen::

#::      map f1 show_first_command_output_on_screen

#::  To get the command output that was last accessed by a keyboard
#::  action or mouse action::

#::      map f1 show_last_visited_command_output

#::  You can pipe the output of the last command run in the shell
#::  using the launch action. For example, the following opens the
#::  output in less in an overlay window::

#::      map f1 launch --stdin-source=@last_cmd_output --stdin-add-formatting --type=overlay less +G -R

#::  To get the output of the first command on the screen, use
#::  @first_cmd_output_on_screen. To get the output of the last jumped
#::  to command, use @last_visited_cmd_output.

#::  Requires shell integration
#::  <https://sw.kovidgoyal.net/kitty/shell-integration/> to work.

#: }}}

#: Window management {{{

#: New window

# map kitty_mod+enter new_window
# map cmd+enter       new_window

#::  You can open a new kitty window running an arbitrary program, for
#::  example::

#::      map kitty_mod+y launch mutt

#::  You can open a new window with the current working directory set
#::  to the working directory of the current window using::

#::      map ctrl+alt+enter launch --cwd=current

#::  You can open a new window that is allowed to control kitty via
#::  the kitty remote control facility with launch --allow-remote-
#::  control. Any programs running in that window will be allowed to
#::  control kitty. For example::

#::      map ctrl+enter launch --allow-remote-control some_program

#::  You can open a new window next to the currently active window or
#::  as the first window, with::

#::      map ctrl+n launch --location=neighbor
#::      map ctrl+f launch --location=first

#::  For more details, see launch
#::  <https://sw.kovidgoyal.net/kitty/launch/>.

#: New OS window

# map kitty_mod+n new_os_window
# map cmd+n       new_os_window

#::  Works like new_window above, except that it opens a top-level OS
#::  window. In particular you can use new_os_window_with_cwd to open
#::  a window with the current working directory.

#: Close window

# map kitty_mod+w close_window
# map shift+cmd+d close_window

#: Next window

# map kitty_mod+] next_window

#: Previous window

# map kitty_mod+[ previous_window

#: Move window forward

# map kitty_mod+f move_window_forward

#: Move window backward

# map kitty_mod+b move_window_backward

#: Move window to top

# map kitty_mod+` move_window_to_top

#: Start resizing window

# map kitty_mod+r start_resizing_window
# map cmd+r       start_resizing_window

#: First window

# map kitty_mod+1 first_window
# map cmd+1       first_window

#: Second window

# map kitty_mod+2 second_window
# map cmd+2       second_window

#: Third window

# map kitty_mod+3 third_window
# map cmd+3       third_window

#: Fourth window

# map kitty_mod+4 fourth_window
# map cmd+4       fourth_window

#: Fifth window

# map kitty_mod+5 fifth_window
# map cmd+5       fifth_window

#: Sixth window

# map kitty_mod+6 sixth_window
# map cmd+6       sixth_window

#: Seventh window

# map kitty_mod+7 seventh_window
# map cmd+7       seventh_window

#: Eight window

# map kitty_mod+8 eighth_window
# map cmd+8       eighth_window

#: Ninth window

# map kitty_mod+9 ninth_window
# map cmd+9       ninth_window

#: Tenth window

# map kitty_mod+0 tenth_window

#: Visually select and focus window

# map kitty_mod+f7 focus_visible_window

#::  Display overlay numbers and alphabets on the window, and switch
#::  the focus to the window when you press the key. When there are
#::  only two windows, the focus will be switched directly without
#::  displaying the overlay. You can change the overlay characters and
#::  their order with option visual_window_select_characters.

#: Visually swap window with another

# map kitty_mod+f8 swap_with_window

#::  Works like focus_visible_window above, but swaps the window.

#: }}}

#: Tab management {{{

#: Next tab

# map kitty_mod+right next_tab
# map shift+cmd+]     next_tab
# map ctrl+tab        next_tab

#: Previous tab

# map kitty_mod+left previous_tab
# map shift+cmd+[    previous_tab
# map ctrl+shift+tab previous_tab

#: New tab

# map kitty_mod+t new_tab
# map cmd+t       new_tab

#: Close tab

# map kitty_mod+q close_tab
# map cmd+w       close_tab

#: Close OS window

# map shift+cmd+w close_os_window

#: Move tab forward

# map kitty_mod+. move_tab_forward

#: Move tab backward

# map kitty_mod+, move_tab_backward

#: Set tab title

# map kitty_mod+alt+t set_tab_title
# map shift+cmd+i     set_tab_title


#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab, 2 the second tab and -1 being the previously active
#: tab, and any number larger than the last tab being the last tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and new_tab_with_cwd.
#: Finally, if you want the new tab to open next to the current tab
#: rather than at the end of the tabs list, use::

#:     map ctrl+t new_tab !neighbor [optional cmd to run]
#: }}}

#: Layout management {{{

#: Next layout

# map kitty_mod+l next_layout


#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:     map ctrl+alt+p last_used_layout

#: There is also a toggle_layout action that switches to the named
#: layout or back to the previous layout if in the named layout.
#: Useful to temporarily "zoom" the active window by switching to the
#: stack layout::

#:     map ctrl+alt+z toggle_layout stack
#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.

#: Increase font size

# map kitty_mod+equal  change_font_size all +2.0
# map kitty_mod+plus   change_font_size all +2.0
# map kitty_mod+kp_add change_font_size all +2.0
# map cmd+plus         change_font_size all +2.0
# map cmd+equal        change_font_size all +2.0
# map shift+cmd+equal  change_font_size all +2.0

#: Decrease font size

# map kitty_mod+minus       change_font_size all -2.0
# map kitty_mod+kp_subtract change_font_size all -2.0
# map cmd+minus             change_font_size all -2.0
# map shift+cmd+minus       change_font_size all -2.0

#: Reset font size

# map kitty_mod+backspace change_font_size all 0
# map cmd+0               change_font_size all 0


#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current OS window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

#: Open URL

# map kitty_mod+e open_url_with_hints

#::  Open a currently visible URL using the keyboard. The program used
#::  to open the URL is specified in open_url_with.

#: Insert selected path

# map kitty_mod+p>f kitten hints --type path --program -

#::  Select a path/filename and insert it into the terminal. Useful,
#::  for instance to run git commands on a filename output from a
#::  previous git command.

#: Open selected path

# map kitty_mod+p>shift+f kitten hints --type path

#::  Select a path/filename and open it with the default open program.

#: Insert selected line

# map kitty_mod+p>l kitten hints --type line --program -

#::  Select a line of text and insert it into the terminal. Useful for
#::  the output of things like: `ls -1`.

#: Insert selected word

# map kitty_mod+p>w kitten hints --type word --program -

#::  Select words and insert into terminal.

#: Insert selected hash

# map kitty_mod+p>h kitten hints --type hash --program -

#::  Select something that looks like a hash and insert it into the
#::  terminal. Useful with git, which uses SHA1 hashes to identify
#::  commits.

#: Open the selected file at the selected line

# map kitty_mod+p>n kitten hints --type linenum

#::  Select something that looks like filename:linenum and open it in
#::  vim at the specified line number.

#: Open the selected hyperlink

# map kitty_mod+p>y kitten hints --type hyperlink

#::  Select a hyperlink (i.e. a URL that has been marked as such by
#::  the terminal program, for example, by `ls --hyperlink=auto`).


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see hints kitten
#: <https://sw.kovidgoyal.net/kitty/kittens/hints/>.
#: }}}

#: Miscellaneous {{{

#: Show documentation

# map kitty_mod+f1 show_kitty_doc overview

#: Toggle fullscreen

# map kitty_mod+f11 toggle_fullscreen
# map ctrl+cmd+f    toggle_fullscreen

#: Toggle maximized

# map kitty_mod+f10 toggle_maximized

#: Toggle macOS secure keyboard entry

# map opt+cmd+s toggle_macos_secure_keyboard_entry

#: Unicode input

# map kitty_mod+u    kitten unicode_input
# map ctrl+cmd+space kitten unicode_input

#: Edit config file

# map kitty_mod+f2 edit_config_file
# map cmd+,        edit_config_file

#: Open the kitty command shell

# map kitty_mod+escape kitty_shell window

#::  Open the kitty shell in a new window / tab / overlay / os_window
#::  to control kitty using commands.

#: Increase background opacity

# map kitty_mod+a>m set_background_opacity +0.1

#: Decrease background opacity

# map kitty_mod+a>l set_background_opacity -0.1

#: Make background fully opaque

# map kitty_mod+a>1 set_background_opacity 1

#: Reset background opacity

# map kitty_mod+a>d set_background_opacity default

#: Reset the terminal

# map kitty_mod+delete clear_terminal reset active
# map opt+cmd+r        clear_terminal reset active

#::  You can create shortcuts to clear/reset the terminal. For
#::  example::

#::      # Reset the terminal
#::      map f1 clear_terminal reset active
#::      # Clear the terminal screen by erasing all contents
#::      map f1 clear_terminal clear active
#::      # Clear the terminal scrollback by erasing it
#::      map f1 clear_terminal scrollback active
#::      # Scroll the contents of the screen into the scrollback
#::      map f1 clear_terminal scroll active
#::      # Clear everything up to the line with the cursor
#::      map f1 clear_terminal to_cursor active

#::  If you want to operate on all kitty windows instead of just the
#::  current one, use all instead of active.

#::  It is also possible to remap Ctrl+L to both scroll the current
#::  screen contents into the scrollback buffer and clear the screen,
#::  instead of just clearing the screen, for example, for ZSH add the
#::  following to ~/.zshrc:

#::  .. code-block:: zsh

#::      scroll-and-clear-screen() {
#::          printf '\n%.0s' {1..$LINES}
#::          zle clear-screen
#::      }
#::      zle -N scroll-and-clear-screen
#::      bindkey '^l' scroll-and-clear-screen

#: Clear up to cursor line

# map cmd+k clear_terminal to_cursor active

#: Reload kitty.conf

# map kitty_mod+f5 load_config_file
# map ctrl+cmd+,   load_config_file

#::  Reload kitty.conf, applying any changes since the last time it
#::  was loaded. Note that a handful of options cannot be dynamically
#::  changed and require a full restart of kitty. Particularly, when
#::  changing shortcuts for actions located on the macOS global menu
#::  bar, a full restart is needed. You can also map a keybinding to
#::  load a different config file, for example::

#::      map f5 load_config /path/to/alternative/kitty.conf

#::  Note that all options from the original kitty.conf are discarded,
#::  in other words the new configuration *replace* the old ones.

#: Debug kitty configuration

# map kitty_mod+f6 debug_config
# map opt+cmd+,    debug_config

#::  Show details about exactly what configuration kitty is running
#::  with and its host environment. Useful for debugging issues.

#: Send arbitrary text on key presses

#::  E.g. map ctrl+shift+alt+h send_text all Hello World

#::  You can tell kitty to send arbitrary (UTF-8) encoded text to the
#::  client program when pressing specified shortcut keys. For
#::  example::

#::      map ctrl+alt+a send_text all Special text

#::  This will send "Special text" when you press the Ctrl+Alt+A key
#::  combination. The text to be sent is a python string literal so
#::  you can use escapes like \x1b to send control codes or \u21fb to
#::  send Unicode characters (or you can just input the Unicode
#::  characters directly as UTF-8 text). You can use `kitty +kitten
#::  show_key` to get the key escape codes you want to emulate.

#::  The first argument to send_text is the keyboard modes in which to
#::  activate the shortcut. The possible values are normal,
#::  application, kitty or a comma separated combination of them. The
#::  modes normal and application refer to the DECCKM cursor key mode
#::  for terminals, and kitty refers to the kitty extended keyboard
#::  protocol. The special value all means all of them.

#::  Some more examples::

#::      # Output a word and move the cursor to the start of the line (like typing and pressing Home)
#::      map ctrl+alt+a send_text normal Word\x1b[H
#::      map ctrl+alt+a send_text application Word\x1bOH
#::      # Run a command at a shell prompt (like typing the command and pressing Enter)
#::      map ctrl+alt+a send_text normal,application some command with arguments\r

#: Open kitty Website

# map shift+cmd+/ open_url https://sw.kovidgoyal.net/kitty/

#: }}}

#: }}}
